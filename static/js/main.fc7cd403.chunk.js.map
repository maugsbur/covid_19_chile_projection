{"version":3,"sources":["logo.svg","components/covid.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","api_url","Covid","state","data","cases","confirmed","fecha","regions","region","_id","regionCases","commune","communeCases","covidChart","width","height","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","type","strokeDasharray","stroke","fillOpacity","fill","covidChartCommunes","values","Object","keys","map","k","renameKeys","keysMap","obj","reduce","acc","key","formatData","d","deaths","index","push","fetch","then","response","json","setState","communes","this","prevProps","prevState","placeholder","options","getOptionLabel","option","getOptionValue","onChange","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc7cd403.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n} from \"recharts\";\nimport Select from \"react-select\";\n\nconst api_url = \"https://staging-chile-coronapi.herokuapp.com/api/v3\";\nconst nation_historical = \"/historical/nation\";\nconst region_historical = \"/historical/regions\";\nconst models_regions = \"/models/regions\";\nconst commune_historical = \"/historical/communes\";\nconst models_communes = \"/models/communes\";\n\nclass Covid extends Component {\n  state = {\n    data: \"nothing yet\",\n    cases: { \"03/07/2020\": { confirmed: \"none\", fecha: \"none\" } },\n    regions: {},\n    region: { _id: 1, region: \"TarapacÃ¡\" },\n    regionCases: { \"03/07/2020\": { confirmed: \"none\", fecha: \"none\" } },\n    commune: { _id: 1101, commune: \"Iquique\" },\n    communeCases: { confirmed: \"none\" },\n  };\n\n  componentDidMount() {\n    fetch(api_url + nation_historical)\n      .then((response) => response.json())\n      .then((cases) => this.setState({ cases }));\n    fetch(api_url + models_regions)\n      .then((response) => response.json())\n      .then((regions) => Object.values(regions))\n      .then((regions) => this.setState({ regions }));\n    fetch(api_url + models_communes)\n      .then((response) => response.json())\n      .then((communes) => Object.values(communes))\n      .then((communes) => this.setState({ communes }));\n    fetch(api_url + region_historical + \"?id=\" + this.state.region._id)\n      .then((response) => response.json())\n      .then((response) => response[\"regionData\"])\n      .then((regionCases) => {\n        return this.setState({ regionCases });\n      });\n    fetch(api_url + commune_historical + \"?id=\" + this.state.commune._id)\n      .then((response) => response.json())\n      .then((response) => response[\"confirmed\"])\n      .then((communeCases) => {\n        return this.setState({ communeCases });\n      });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.region != this.state.region) {\n      fetch(api_url + region_historical + \"?id=\" + this.state.region._id)\n        .then((response) => response.json())\n        .then((response) => response[\"regionData\"])\n        .then((regionCases) => {\n          return this.setState({ regionCases });\n        });\n    }\n    if (prevState.commune != this.state.commune) {\n      fetch(api_url + commune_historical + \"?id=\" + this.state.commune._id)\n        .then((response) => response.json())\n        .then((response) => response[\"confirmed\"])\n        .then((communeCases) => {\n          return this.setState({ communeCases });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Nacional</h1>\n        {this.covidChart(this.formatData(this.state.cases))}\n        <h1>Regional</h1>\n        <Select\n          placeholder={this.state.region.region}\n          options={this.state.regions}\n          getOptionLabel={(option) => option.region}\n          getOptionValue={(option) => option.region}\n          onChange={(region) => {\n            this.setState({ region });\n          }}\n        />\n        {this.covidChart(this.formatData(this.state.regionCases))}\n        <h1>Comunal</h1>\n        <Select\n          placeholder={this.state.commune.commune}\n          options={this.state.communes}\n          getOptionLabel={(option) => option.commune}\n          getOptionValue={(option) => option.commune}\n          onChange={(commune) => {\n            this.setState({ commune });\n          }}\n        />\n        {this.covidChartCommunes(this.state.communeCases)}\n      </div>\n    );\n  }\n\n  covidChart = (data) => {\n    return (\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <AreaChart\n          data={data}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <defs>\n            <linearGradient id=\"colorConfirmados\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorMuertes\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"color47*muertes\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#ed503b\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#ed503b\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorCasos+10dÃ­as\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#e8e838\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#e8e838\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"fecha\" />\n          {/* <YAxis type=\"number\" domain={[0, \"dataMax+30000\"]} /> */}\n          <YAxis type=\"number\" />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n\n          <Area\n            type=\"monotone\"\n            dataKey=\"confirmados\"\n            stroke=\"#8884d8\"\n            fillOpacity={1}\n            fill=\"url(#colorConfirmados)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"muertes\"\n            stroke=\"#82ca9d\"\n            fillOpacity={1}\n            fill=\"url(#colorMuertes)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"47*muertes\"\n            stroke=\"#ed503b\"\n            fillOpacity={1}\n            fill=\"url(#color47*muertes)\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"casos + 10 dÃ­as\"\n            stroke=\"#e8e838\"\n            fillOpacity={1}\n            fill=\"url(#colorCasos+10dÃ­as)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  };\n  covidChartCommunes = (data) => {\n    let keys = Object.keys(data);\n    let values = keys.map((k) => {\n      return { confirmed: data[k], fecha: k };\n    });\n\n    return (\n      <ResponsiveContainer width=\"95%\" height={400}>\n        <AreaChart\n          data={values}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <defs>\n            <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <XAxis dataKey=\"fecha\" />\n          {/* <YAxis type=\"number\" domain={[0, \"dataMax+30000\"]} /> */}\n          <YAxis type=\"number\" />\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n\n          <Area\n            type=\"monotone\"\n            dataKey=\"confirmed\"\n            stroke=\"#8884d8\"\n            fillOpacity={1}\n            fill=\"url(#colorConfirmed)\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    );\n  };\n  renameKeys = (keysMap, obj) =>\n    Object.keys(obj).reduce(\n      (acc, key) => ({\n        ...acc,\n        ...{ [keysMap[key] || key]: obj[key] },\n      }),\n      {}\n    );\n\n  formatData = (data) => {\n    Object.keys(data).map((key) => (data[key][\"fecha\"] = key));\n    data = Object.values(data);\n\n    data.map((d) => (d[\"47*muertes\"] = d.deaths * 47));\n    data.map((d, index) => {\n      if (index < 10) {\n        d[\"casos + 10 dÃ­as\"] = 0;\n      } else {\n        d[\"casos + 10 dÃ­as\"] = data[index - 10][\"confirmed\"];\n      }\n    });\n    let values = [];\n    data.map((d) => {\n      values.push(\n        this.renameKeys({ confirmed: \"confirmados\", deaths: \"muertes\" }, d)\n      );\n    });\n    return values;\n  };\n}\n\nexport default Covid;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Covid from \"./components/covid\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Covid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}